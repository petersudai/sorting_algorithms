void bubble_sort(int *array, size_t size)

1. the function bubble sort is a sorting algorithm that takes an array of integers and its size as parameters.
2. the function has a return type of 'void', indicating that it sorts the array in place
3. the function declares 3 variables: 'i' and 'j' are loop countersc, 'temp' is a temporary variable for swapping and 'swapped' is a flag to track whether any swaps occured during a pass
4. the function if the array is 'NULL' or if its size is less than 2. If either conditiion is true, the function returns early because sorting is unnecessary.
5. the function enters the outer loop and iterates over the array from beginning to the second last elemnt. It represents each pass of the Bubble Sort.
6. the function enters inside the outer loop and 'swapped' is set to 0 at the beginning of each pass.
7. the function enters the inner loop and iterates over the unsorted portion of the array. The '- i' is used to avoid unnecessary comparisons with already sorted elements.
8. the function checks inside the inner loop if 'array[j]' is greater than 'array[j + i]'. If true, it swaps the elements and sets 'swapped' to 1.
9. the function then checks if 'swapped' is still 0, it means no swaps occurred during the pass, indicating that the array is already sorted. In this case, the function breaks out of the outer loop, avoiding unnecessary iterations.
10. the function prints the array.
11. the function returns.

void print_array(const int *array, size_t size);

1. the function prints arrays, providing a visual representation of the sorting process
2. the functions takes 2 parameters
3. the function is called after each swap to print the current state of the array
4. the function returns
